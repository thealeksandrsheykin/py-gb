# -*- coding: utf-8 -*-
# !/usr/bin/env python3

"""
3.Создать собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел. Проверить
работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо только числами.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду «stop». При этом скрипт завершается, сформированный список с числами выводится на
экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки. Во время ввода пользователем
очередного элемента необходимо реализовать проверку типа элемента. Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class My_Exception(Exception):
    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return self.msg


class CreateList:
    my_list = list()

    def __call__(self):
        print(f'Если вы захотите остановить работу скрипта, то введите команду «stop»')
        while True:
            element = input('Введите элемент списка: ')
            try:
                if element.isnumeric():
                    self.my_list.append(int(element))
                elif element == 'stop':
                    break
                else:
                    raise My_Exception(f'Кажется элемент "{element}" не принадлежит к типу "ЧИСЛО".\n'
                                       f'Попробуйте еще раз ввести элемент списка (должен быть числом).')
            except My_Exception as error:
                print(f'{error}')
        return CreateList()

    def __str__(self):
        return f'Результирующий список: {self.my_list}'


if __name__ == '__main__':
    my_class = CreateList()
    print(my_class())
